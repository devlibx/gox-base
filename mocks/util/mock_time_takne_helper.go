// Code generated by MockGen. DO NOT EDIT.
// Source: time_takne_helper.go

// Package mockUtil is a generated GoMock package.
package mockUtil

import (
	reflect "reflect"

	util "github.com/devlibx/gox-base/v2/util"
	gomock "github.com/golang/mock/gomock"
)

// MockTimeTracker is a mock of TimeTracker interface.
type MockTimeTracker struct {
	ctrl     *gomock.Controller
	recorder *MockTimeTrackerMockRecorder
}

// MockTimeTrackerMockRecorder is the mock recorder for MockTimeTracker.
type MockTimeTrackerMockRecorder struct {
	mock *MockTimeTracker
}

// NewMockTimeTracker creates a new mock instance.
func NewMockTimeTracker(ctrl *gomock.Controller) *MockTimeTracker {
	mock := &MockTimeTracker{ctrl: ctrl}
	mock.recorder = &MockTimeTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeTracker) EXPECT() *MockTimeTrackerMockRecorder {
	return m.recorder
}

// Capture mocks base method.
func (m *MockTimeTracker) Capture() util.Capture {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capture")
	ret0, _ := ret[0].(util.Capture)
	return ret0
}

// Capture indicates an expected call of Capture.
func (mr *MockTimeTrackerMockRecorder) Capture() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capture", reflect.TypeOf((*MockTimeTracker)(nil).Capture))
}

// MockCapture is a mock of Capture interface.
type MockCapture struct {
	ctrl     *gomock.Controller
	recorder *MockCaptureMockRecorder
}

// MockCaptureMockRecorder is the mock recorder for MockCapture.
type MockCaptureMockRecorder struct {
	mock *MockCapture
}

// NewMockCapture creates a new mock instance.
func NewMockCapture(ctrl *gomock.Controller) *MockCapture {
	mock := &MockCapture{ctrl: ctrl}
	mock.recorder = &MockCaptureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCapture) EXPECT() *MockCaptureMockRecorder {
	return m.recorder
}

// DumpMicros mocks base method.
func (m *MockCapture) DumpMicros() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpMicros")
	ret0, _ := ret[0].(string)
	return ret0
}

// DumpMicros indicates an expected call of DumpMicros.
func (mr *MockCaptureMockRecorder) DumpMicros() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpMicros", reflect.TypeOf((*MockCapture)(nil).DumpMicros))
}

// DumpMillis mocks base method.
func (m *MockCapture) DumpMillis() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpMillis")
	ret0, _ := ret[0].(string)
	return ret0
}

// DumpMillis indicates an expected call of DumpMillis.
func (mr *MockCaptureMockRecorder) DumpMillis() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpMillis", reflect.TypeOf((*MockCapture)(nil).DumpMillis))
}

// DumpNanos mocks base method.
func (m *MockCapture) DumpNanos() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpNanos")
	ret0, _ := ret[0].(string)
	return ret0
}

// DumpNanos indicates an expected call of DumpNanos.
func (mr *MockCaptureMockRecorder) DumpNanos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpNanos", reflect.TypeOf((*MockCapture)(nil).DumpNanos))
}

// Record mocks base method.
func (m *MockCapture) Record(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Record", msg)
}

// Record indicates an expected call of Record.
func (mr *MockCaptureMockRecorder) Record(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockCapture)(nil).Record), msg)
}
