// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mockGox is a generated GoMock package.
package mockGox

import (
	reflect "reflect"
	time "time"

	gox "github.com/devlibx/gox-base/v2"
	metrics "github.com/devlibx/gox-base/v2/metrics"
	util "github.com/devlibx/gox-base/v2/util"
	gomock "github.com/golang/mock/gomock"
	zap "go.uber.org/zap"
)

// MockTimeService is a mock of TimeService interface.
type MockTimeService struct {
	ctrl     *gomock.Controller
	recorder *MockTimeServiceMockRecorder
}

// MockTimeServiceMockRecorder is the mock recorder for MockTimeService.
type MockTimeServiceMockRecorder struct {
	mock *MockTimeService
}

// NewMockTimeService creates a new mock instance.
func NewMockTimeService(ctrl *gomock.Controller) *MockTimeService {
	mock := &MockTimeService{ctrl: ctrl}
	mock.recorder = &MockTimeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeService) EXPECT() *MockTimeServiceMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockTimeService) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockTimeServiceMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockTimeService)(nil).Now))
}

// Sleep mocks base method.
func (m *MockTimeService) Sleep(d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sleep", d)
}

// Sleep indicates an expected call of Sleep.
func (mr *MockTimeServiceMockRecorder) Sleep(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sleep", reflect.TypeOf((*MockTimeService)(nil).Sleep), d)
}

// MockCrossFunction is a mock of CrossFunction interface.
type MockCrossFunction struct {
	ctrl     *gomock.Controller
	recorder *MockCrossFunctionMockRecorder
}

// MockCrossFunctionMockRecorder is the mock recorder for MockCrossFunction.
type MockCrossFunctionMockRecorder struct {
	mock *MockCrossFunction
}

// NewMockCrossFunction creates a new mock instance.
func NewMockCrossFunction(ctrl *gomock.Controller) *MockCrossFunction {
	mock := &MockCrossFunction{ctrl: ctrl}
	mock.recorder = &MockCrossFunctionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrossFunction) EXPECT() *MockCrossFunctionMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockCrossFunction) Config() gox.StringObjectMap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(gox.StringObjectMap)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockCrossFunctionMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockCrossFunction)(nil).Config))
}

// Logger mocks base method.
func (m *MockCrossFunction) Logger() *zap.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(*zap.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockCrossFunctionMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockCrossFunction)(nil).Logger))
}

// Metric mocks base method.
func (m *MockCrossFunction) Metric() metrics.Scope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metric")
	ret0, _ := ret[0].(metrics.Scope)
	return ret0
}

// Metric indicates an expected call of Metric.
func (mr *MockCrossFunctionMockRecorder) Metric() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metric", reflect.TypeOf((*MockCrossFunction)(nil).Metric))
}

// Now mocks base method.
func (m *MockCrossFunction) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockCrossFunctionMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockCrossFunction)(nil).Now))
}

// Publisher mocks base method.
func (m *MockCrossFunction) Publisher() metrics.Publisher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publisher")
	ret0, _ := ret[0].(metrics.Publisher)
	return ret0
}

// Publisher indicates an expected call of Publisher.
func (mr *MockCrossFunctionMockRecorder) Publisher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publisher", reflect.TypeOf((*MockCrossFunction)(nil).Publisher))
}

// Sleep mocks base method.
func (m *MockCrossFunction) Sleep(d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sleep", d)
}

// Sleep indicates an expected call of Sleep.
func (mr *MockCrossFunctionMockRecorder) Sleep(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sleep", reflect.TypeOf((*MockCrossFunction)(nil).Sleep), d)
}

// TimeTracker mocks base method.
func (m *MockCrossFunction) TimeTracker() util.TimeTracker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeTracker")
	ret0, _ := ret[0].(util.TimeTracker)
	return ret0
}

// TimeTracker indicates an expected call of TimeTracker.
func (mr *MockCrossFunctionMockRecorder) TimeTracker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeTracker", reflect.TypeOf((*MockCrossFunction)(nil).TimeTracker))
}
